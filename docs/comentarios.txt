Teste Mobile
--> testes de aplicativos para celulares e tablets
--> também de app para relógio, central de mídia, smartv

Vamos usar o framework Appium
 - Trabalha tanto Android como IOS
 - É uma vertente do Selenium Webdriver voltada para teste de app
 - Múltiplos sistemas operacionais
 - Múltiplas linguagens de programação: C#, Java, JavaScript, Python

 Tipos de aplicativos
- WebApp (Site disfarçado de aplicativo)
- Nativo - um projeto separado para Android e outro para IOS
- Híbrido - um projeto gera apps para Android e IOS

Requisitos de Hardware
- Processador Intel i5 ou i7 (poderia ser i9)
- Familia do processador 12-->2022, 13-->2023, 14-->2024
- Memória RAM: 8GB --> 16GB
- Placa de vídeo offboard
- Disco Rígido: SSD (pelo menos boot)

Ambiente de Teste em Nuvem = Device Farms
- SauceLabs  --> vamos criar uma conta
- BrowserStack
- Perfecto

Ambientes de teste
- Em um aparelho celular, conectado a um computador/notebook por um cabo USB
(precisa colocar o seu aparelho em modo desenvolvedor - consulte no Youtube)
- Emulador instalado no seu computador/notebook (é um tipo de maquina virtual)
- Device Farms, que pode ter tanto aparelhos físicos quanto emulador

Compatibilidade com Android e IOS
- Computadores com windows ou linux, sejam processadores intel ou AMD só serve como ambiente para Android por aparelho fisico ou emulador (pela device farm ou se tiver um iPhone)
- Macbook ou computador Mac podem conectar ou emular tanto Android como IOS
- Existe um procedimento descrito na internet para criar uma VM de MacOS para rodar windows

Existem 2 softwares chamados Apppium:
- Appium Desktop (também chamam de Appium Server) que é um gerenciador de automação de app
    Precisamos quando vamos testar em um aparelho físico ou emulador direto no nosso computador
    (seria o motor por trás de uma device farm)
- Appium inspector que serve para inspecionar os elementos de um app

O deviceName (nome do aparelho) em um emulador ou aparelho físico é sempre emulator5553.
Você pode ligar vários aparelhos ou emuladores ao mesmo tempo, eles vão se chamar:
emulator5554, emulator5555 e assim por diante.

Roteiro de inspeção

- instalar o app alvo e o Apk info
- Usar o Apk Info para descobrir:
appPackage: com.saucelabs.mydemoapp.android
appActivity: com.saucelabs.mydemoapp.android.view.activities.SplashActivity
ou com.saucelabs.mydemoapp.android.view.activities.MainActivity
- Baixar e instalar o Appium Inspector
- Configurar o Appium Inspector para acessar o app no SauceLabs com as infos de Apk Info
- Usar o Appium Inspector para mapear os elementos e exportar o script de teste














